version: '3.8'

services:
  # PostgreSQL 关系型数据库
  postgres:
    image: postgres:14-alpine
    container_name: tip-postgres
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: tip_password
      POSTGRES_USER: tip_user
      POSTGRES_DB: tip_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/db_init/postgres:/docker-entrypoint-initdb.d
    command: >
      -c max_connections=200
      -c shared_buffers=512MB
    networks:
      - tip_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tip_user -d tip_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  # Elasticsearch 搜索引擎
  elasticsearch:
    image: elasticsearch:7.17.7
    container_name: tip-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
      - ./infrastructure/config/elasticsearch:/usr/share/elasticsearch/config/templates
    networks:
      - tip_network
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  # Kibana (可选，用于ES管理)
  kibana:
    image: kibana:7.17.7
    container_name: tip-kibana
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - tip_network
    depends_on:
      - elasticsearch
      
  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    container_name: tip-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - tip_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      
  # Kafka 消息队列
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: tip-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - tip_network
      
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: tip-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - tip_network
      
  # Kafka UI (可选，用于管理Kafka)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: tip-kafka-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: tip-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - tip_network
    depends_on:
      - kafka
      
  # Neo4j 图数据库
  neo4j:
    image: neo4j:4.4-community
    container_name: tip-neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/tip_password
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 1G
      NEO4J_dbms_memory_pagecache_size: 512m
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - ./infrastructure/db_init/neo4j:/var/lib/neo4j/import/init
    networks:
      - tip_network
      
  # MinIO 对象存储
  minio:
    image: minio/minio:RELEASE.2023-02-22T18-23-45Z
    container_name: tip-minio
    restart: unless-stopped
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    networks:
      - tip_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      
  # Kong API网关
  kong-database:
    image: postgres:14-alpine
    container_name: tip-kong-database
    restart: unless-stopped
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong_password
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - tip_network
      
  kong-migration:
    image: kong:2.8.1-alpine
    container_name: tip-kong-migration
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_password
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    restart: on-failure
    networks:
      - tip_network
      
  kong:
    image: kong:2.8.1-alpine
    container_name: tip-kong
    restart: unless-stopped
    depends_on:
      - kong-database
      - kong-migration
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_password
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "8000:8000"  # Proxy
      - "8443:8443"  # Proxy SSL
      - "8001:8001"  # Admin API
      - "8444:8444"  # Admin API SSL
    networks:
      - tip_network
      
  # Konga (Kong UI，可选)
  konga:
    image: pantsel/konga:0.14.9
    container_name: tip-konga
    restart: unless-stopped
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_PORT: 5432
      DB_USER: kong
      DB_PASSWORD: kong_password
      DB_DATABASE: konga
      NODE_ENV: development
    ports:
      - "1337:1337"
    networks:
      - tip_network
    depends_on:
      - kong
      - kong-database

networks:
  tip_network:
    driver: bridge

volumes:
  postgres_data:
  elastic_data:
  redis_data:
  zookeeper_data:
  kafka_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  minio_data:
  kong_data: 