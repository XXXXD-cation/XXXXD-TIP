name: Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'

jobs:
  lint-and-test:
    name: 代码检查和测试
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # 检查是否存在Go模块
      - name: 检查Go模块
        id: check-go
        run: |
          if [ -f "go.mod" ] || [ -d "service" -a -f "service/go.mod" ]; then
            echo "go_exists=true" >> $GITHUB_OUTPUT
          else
            echo "go_exists=false" >> $GITHUB_OUTPUT
            echo "未检测到Go模块，将跳过Go相关检查"
          fi

      # 检查前端目录
      - name: 检查前端目录
        id: check-frontend
        run: |
          if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
            echo "frontend_exists=true" >> $GITHUB_OUTPUT
          else
            echo "frontend_exists=false" >> $GITHUB_OUTPUT
            echo "未检测到前端项目，将跳过前端相关检查"
          fi

      # Go 代码规范检查
      - name: 设置 Go
        if: ${{ steps.check-go.outputs.go_exists == 'true' }}
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          # 只在go.mod存在时启用缓存
          cache: true
        continue-on-error: true
      
      - name: 检查Go模块并安装golangci-lint
        if: ${{ steps.check-go.outputs.go_exists == 'true' }}
        run: |
          echo "Go模块存在，安装golangci-lint..."
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
        continue-on-error: true
      
      - name: 运行 golangci-lint
        if: ${{ steps.check-go.outputs.go_exists == 'true' }}
        run: |
          if [ -f "go.mod" ]; then
            echo "在根目录运行golangci-lint..."
            golangci-lint run ./... || echo "Golangci-lint检查失败，但继续执行"
          elif [ -d "service" -a -f "service/go.mod" ]; then
            echo "在service目录运行golangci-lint..."
            cd service && golangci-lint run ./... || echo "Golangci-lint检查失败，但继续执行"
          fi
        continue-on-error: true
      
      # 前端代码规范检查
      - name: 设置 Node.js
        if: ${{ steps.check-frontend.outputs.frontend_exists == 'true' }}
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
        continue-on-error: true
      
      - name: 安装依赖
        if: ${{ steps.check-frontend.outputs.frontend_exists == 'true' }}
        run: cd frontend && npm ci
        continue-on-error: true
      
      - name: 运行 ESLint
        if: ${{ steps.check-frontend.outputs.frontend_exists == 'true' }}
        run: cd frontend && npm run lint
        continue-on-error: true
      
      # 后端测试
      - name: 检查Go服务和安装依赖
        if: ${{ steps.check-go.outputs.go_exists == 'true' }}
        run: |
          echo "服务目录存在，安装Go依赖..."
          cd service && go mod download
        continue-on-error: true

      - name: 运行单元测试
        if: ${{ steps.check-go.outputs.go_exists == 'true' }}
        run: |
          echo "运行Go单元测试..."
          cd service && go test -v ./... -coverprofile=coverage.out
        continue-on-error: true
      
      # 前端测试
      - name: 运行前端测试
        if: ${{ steps.check-frontend.outputs.frontend_exists == 'true' }}
        run: cd frontend && npm run test:unit
        continue-on-error: true

      # 检查Docker环境
      - name: 检查Docker环境
        id: check-docker
        run: |
          if [ -f "docker-compose.yml" ]; then
            echo "docker_compose_exists=true" >> $GITHUB_OUTPUT
            echo "检测到docker-compose.yml文件"
          else
            echo "docker_compose_exists=false" >> $GITHUB_OUTPUT
            echo "未检测到docker-compose.yml文件，跳过Docker相关操作"
          fi
      
      - name: 安装Docker Compose
        if: ${{ steps.check-docker.outputs.docker_compose_exists == 'true' }}
        run: |
          echo "安装Docker Compose..."
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
        continue-on-error: true

  build-and-push:
    name: 构建和推送镜像
    needs: lint-and-test
    if: ${{ always() && (needs.lint-and-test.result == 'success' || needs.lint-and-test.result == 'skipped') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # 检查是否存在Go模块
      - name: 检查Go模块
        id: check-go
        run: |
          if [ -f "go.mod" ] || [ -d "service" -a -f "service/go.mod" ]; then
            echo "go_exists=true" >> $GITHUB_OUTPUT
          else
            echo "go_exists=false" >> $GITHUB_OUTPUT
          fi
      
      # 检查前端目录
      - name: 检查前端目录
        id: check-frontend
        run: |
          if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
            echo "frontend_exists=true" >> $GITHUB_OUTPUT
          else
            echo "frontend_exists=false" >> $GITHUB_OUTPUT
          fi
      
      # 检查Docker环境
      - name: 检查Docker环境
        id: check-docker
        run: |
          if [ -f "docker-compose.yml" ]; then
            echo "docker_compose_exists=true" >> $GITHUB_OUTPUT
            echo "检测到docker-compose.yml文件"
          else
            echo "docker_compose_exists=false" >> $GITHUB_OUTPUT
            echo "未检测到docker-compose.yml文件，跳过Docker相关操作"
          fi
      
      - name: 安装Docker Compose
        if: ${{ steps.check-docker.outputs.docker_compose_exists == 'true' }}
        run: |
          echo "安装Docker Compose..."
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
        continue-on-error: true
      
      - name: 提取版本信息
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
            echo "RELEASE_VERSION=${VERSION}" >> $GITHUB_OUTPUT
          else
            SHA=$(git rev-parse --short HEAD)
            echo "VERSION=latest" >> $GITHUB_OUTPUT
            echo "RELEASE_VERSION=sha-${SHA}" >> $GITHUB_OUTPUT
          fi
      
      # 检查Docker Hub密钥是否存在
      - name: 检查Docker Hub密钥
        id: check-secrets
        env: 
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          if [ -n "$DOCKER_USERNAME" ] && [ -n "$DOCKER_PASSWORD" ]; then
            echo "docker_creds_exist=true" >> $GITHUB_OUTPUT
          else
            echo "docker_creds_exist=false" >> $GITHUB_OUTPUT
            echo "警告: Docker Hub密钥未设置，镜像推送将被跳过"
          fi
      
      - name: 登录到 Docker Hub
        if: ${{ steps.check-secrets.outputs.docker_creds_exist == 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true
      
      # 构建并推送后端服务镜像
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v2
        continue-on-error: true
      
      - name: 设置 Go
        if: ${{ steps.check-go.outputs.go_exists == 'true' }}
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
        continue-on-error: true
      
      - name: 构建并推送后端服务镜像
        if: ${{ steps.check-go.outputs.go_exists == 'true' && steps.check-secrets.outputs.docker_creds_exist == 'true' }}
        run: |
          for service_dir in service/*/; do
            if [ -d "$service_dir" ]; then
              service_name=$(basename "$service_dir")
              echo "Building $service_name..."
              
              if [ -f "${service_dir}Dockerfile" ]; then
                echo "构建并推送 $service_name 镜像..."
                docker buildx build \
                  --platform linux/amd64,linux/arm64 \
                  -t ${{ secrets.DOCKER_USERNAME }}/tip-${service_name}:${{ steps.version.outputs.VERSION }} \
                  -t ${{ secrets.DOCKER_USERNAME }}/tip-${service_name}:${{ steps.version.outputs.RELEASE_VERSION }} \
                  --push \
                  -f ${service_dir}Dockerfile ${service_dir} || echo "构建 $service_name 失败，但继续执行"
              else
                echo "Dockerfile not found for $service_name, skipping..."
              fi
            fi
          done
        continue-on-error: true
      
      # 构建并推送前端镜像
      - name: 设置 Node.js
        if: ${{ steps.check-frontend.outputs.frontend_exists == 'true' }}
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
        continue-on-error: true
      
      - name: 构建前端应用
        if: ${{ steps.check-frontend.outputs.frontend_exists == 'true' }}
        run: cd frontend && npm ci && npm run build
        continue-on-error: true
      
      - name: 检查Dockerfile并构建前端镜像
        if: ${{ steps.check-frontend.outputs.frontend_exists == 'true' && steps.check-secrets.outputs.docker_creds_exist == 'true' }}
        run: |
          if [ -f "frontend/Dockerfile" ]; then
            echo "Frontend Dockerfile found, building image..."
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              -t ${{ secrets.DOCKER_USERNAME }}/tip-frontend:${{ steps.version.outputs.VERSION }} \
              -t ${{ secrets.DOCKER_USERNAME }}/tip-frontend:${{ steps.version.outputs.RELEASE_VERSION }} \
              --push \
              -f frontend/Dockerfile frontend || echo "构建前端镜像失败，但继续执行"
          else
            echo "Frontend Dockerfile not found, skipping frontend image build..."
          fi
        continue-on-error: true
  
  create-release:
    name: 创建GitHub发布版本
    needs: build-and-push
    if: ${{ always() && startsWith(github.ref, 'refs/tags/') && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: 生成变更日志
        id: changelog
        run: |
          # 尝试查找前一个标签
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          
          echo "生成变更日志..."
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "找不到前一个标签，使用全部提交历史"
            git log --pretty=format:"* %s (%h)" > CHANGELOG.md
          else
            echo "从 $PREVIOUS_TAG 开始生成变更日志"
            git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD > CHANGELOG.md
          fi
          
          # 将变更日志内容写入输出变量
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        continue-on-error: true
      
      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## 变更日志
            
            ${{ steps.changelog.outputs.CHANGELOG || '无法生成变更日志' }}
            
            ## Docker镜像
            
            所有服务已发布到Docker Hub，使用标签 `${{ github.ref_name }}` 