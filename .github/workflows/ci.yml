name: CI

on:
  push:
    branches: [ develop, 'feature/**' ]
  pull_request:
    branches: [ develop, main ]

jobs:
  lint:
    name: 代码规范检查
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Go 代码规范检查
      - name: 设置 Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: 安装 golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
      
      - name: 运行 golangci-lint
        run: golangci-lint run ./...
      
      # 前端代码规范检查
      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: 安装依赖
        run: |
          if [ -d "frontend" ]; then
            cd frontend && npm ci
          fi
      
      - name: 运行 ESLint
        run: |
          if [ -d "frontend" ]; then
            cd frontend && npm run lint
          fi

  test-backend:
    name: 后端测试
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_PASSWORD: tip_password
          POSTGRES_USER: tip_user
          POSTGRES_DB: tip_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: 设置 Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: 安装依赖
        run: |
          cd service && go mod download

      - name: 运行单元测试
        run: |
          cd service && go test -v ./... -coverprofile=coverage.out
      
      - name: 上传测试覆盖率报告
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: service/coverage.out

  test-frontend:
    name: 前端测试
    runs-on: ubuntu-latest
    needs: lint
    if: ${{ hashFiles('frontend/package.json') != '' }}
    steps:
      - uses: actions/checkout@v3
      
      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: 安装依赖
        run: |
          cd frontend && npm ci
      
      - name: 运行单元测试
        run: |
          cd frontend && npm run test:unit
      
      - name: 构建检查
        run: |
          cd frontend && npm run build

  build:
    name: 构建检查
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - uses: actions/checkout@v3
      
      - name: 设置 Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: 构建后端服务
        run: |
          for service_dir in service/*/; do
            service_name=$(basename "$service_dir")
            echo "Building $service_name..."
            cd "$service_dir" && go build -v -o "../../bin/$service_name" . && cd ../..
          done
      
      - name: 构建 Docker 镜像
        run: docker-compose build 