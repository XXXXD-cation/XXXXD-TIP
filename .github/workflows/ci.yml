name: CI

on:
  push:
    branches: [ develop, 'feature/**' ]
  pull_request:
    branches: [ develop, main ]

jobs:
  lint:
    name: 代码规范检查
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # 检查是否存在Go模块
      - name: 检查Go模块
        id: check-go
        run: |
          if [ -f "go.mod" ] || [ -d "service" -a -f "service/go.mod" ]; then
            echo "go_exists=true" >> $GITHUB_OUTPUT
          else
            echo "go_exists=false" >> $GITHUB_OUTPUT
          fi

      # Go 代码规范检查
      - name: 设置 Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          # 只在go.mod存在时启用缓存
          cache: ${{ steps.check-go.outputs.go_exists == 'true' }}
      
      - name: 检查Go模块并安装golangci-lint
        run: |
          if [ -f "go.mod" ] || [ -d "service" -a -f "service/go.mod" ]; then
            echo "Go模块存在，安装golangci-lint..."
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
          else
            echo "未找到Go模块，跳过golangci-lint安装"
          fi
      
      - name: 运行 golangci-lint
        run: |
          if [ -f "go.mod" ]; then
            echo "在根目录运行golangci-lint..."
            golangci-lint run ./...
          elif [ -d "service" -a -f "service/go.mod" ]; then
            echo "在service目录运行golangci-lint..."
            cd service && golangci-lint run ./...
          else
            echo "未找到Go模块，跳过golangci-lint检查"
          fi
      
      # 前端代码规范检查
      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: 安装依赖
        run: |
          if [ -d "frontend" ]; then
            cd frontend && npm ci
          fi
      
      - name: 运行 ESLint
        run: |
          if [ -d "frontend" ]; then
            cd frontend && npm run lint
          fi

  test-backend:
    name: 后端测试
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_PASSWORD: tip_password
          POSTGRES_USER: tip_user
          POSTGRES_DB: tip_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      # 检查是否存在Go模块
      - name: 检查Go模块
        id: check-go
        run: |
          if [ -d "service" -a -f "service/go.mod" ]; then
            echo "go_exists=true" >> $GITHUB_OUTPUT
          else
            echo "go_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: 设置 Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          # 只在go.mod存在时启用缓存
          cache: ${{ steps.check-go.outputs.go_exists == 'true' }}
      
      - name: 检查Go服务和安装依赖
        run: |
          if [ -d "service" ]; then
            echo "服务目录存在，安装Go依赖..."
            if [ -f "service/go.mod" ]; then
              cd service && go mod download
            else
              echo "服务目录中没有go.mod文件，跳过依赖安装"
            fi
          else
            echo "服务目录不存在，跳过后端测试"
          fi

      - name: 运行单元测试
        run: |
          if [ -d "service" ] && [ -f "service/go.mod" ]; then
            echo "运行Go单元测试..."
            cd service && go test -v ./... -coverprofile=coverage.out
          else
            echo "服务目录或go.mod不存在，跳过单元测试"
            # 创建一个空的覆盖率文件，以便后续步骤不会失败
            mkdir -p service
            touch service/coverage.out
          fi
      
      - name: 上传测试覆盖率报告
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: service/coverage.out

  test-frontend:
    name: 前端测试
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      
      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: 安装依赖
        run: |
          if [ -d "frontend" ]; then
            cd frontend && npm ci
          fi
      
      - name: 运行单元测试
        run: |
          if [ -d "frontend" ]; then
            cd frontend && npm run test:unit
          fi
      
      - name: 构建检查
        run: |
          if [ -d "frontend" ]; then
            cd frontend && npm run build
          fi

  build:
    name: 构建检查
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - uses: actions/checkout@v3
      
      - name: 设置 Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      
      - name: 构建后端服务
        run: |
          for service_dir in service/*/; do
            service_name=$(basename "$service_dir")
            echo "Building $service_name..."
            cd "$service_dir" && go build -v -o "../../bin/$service_name" . && cd ../..
          done
      
      - name: 构建 Docker 镜像
        run: docker-compose build 